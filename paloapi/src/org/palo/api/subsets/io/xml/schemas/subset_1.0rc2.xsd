<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
targetNamespace="http://www.jedox.com/palo/SubsetXML"
xmlns="http://www.jedox.com/palo/SubsetXML"
elementFormDefault="qualified">
	<xs:annotation>
		<xs:appinfo>palosubset version="1.0rc2"</xs:appinfo>
	</xs:annotation>
	<xs:element name="subset">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" maxOccurs="1" ref="indent"/>
				<xs:element minOccurs="0" maxOccurs="1" ref="alias_filter" />
				<xs:element minOccurs="0" maxOccurs="1" ref="hierarchical_filter" />
				<xs:element minOccurs="0" maxOccurs="1" ref="text_filter" />
				<xs:element minOccurs="0" maxOccurs="1" ref="attribute_filter" />
				<xs:element minOccurs="0" maxOccurs="1" ref="data_filter" />
				<xs:element minOccurs="0" maxOccurs="1" ref="picklist_filter" />
				<xs:element minOccurs="0" maxOccurs="1" ref="sorting_filter" />
			</xs:sequence>
			
			<xs:attribute name="name" type="xs:string" />
			<xs:attribute name="id" type="xs:integer" use="required" />
			<xs:attribute name="sourceDimensionId" type="xs:integer" use="required" />
		</xs:complexType>
	</xs:element>
	
	<xs:element name="indent" type="intParam"/>
	
	<!-- ***************************************************************************
   ************************* Alias Filter Begin ************************************
   ******************************************************************************* -->
	<xs:element name="alias_filter">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" maxOccurs="1" ref="alias1" />
				<xs:element minOccurs="0" maxOccurs="1" ref="alias2" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	<xs:element name="alias1" type="intParam"/>
	<xs:element name="alias2" type="intParam"/>
	<!-- ***************************************************************************
   ************************* Alias Filter End **************************************
   ******************************************************************************* -->

	<!-- ***************************************************************************
   ****************** Hierarchical Filter Begin ************************************
   ******************************************************************************* -->
	<xs:element name="hierarchical_filter">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" maxOccurs="1" ref="element" />
				<xs:element minOccurs="0" maxOccurs="1" ref="above" />
				<xs:element minOccurs="0" maxOccurs="1" ref="exclusive" />
				<xs:element minOccurs="0" maxOccurs="1" ref="hide" />
				<xs:element minOccurs="0" maxOccurs="1" ref="revolve_element" />
				<xs:element minOccurs="0" maxOccurs="1" ref="revolve_count" />
				<xs:element minOccurs="0" maxOccurs="1" ref="revolve_add" />
				<xs:element minOccurs="0" maxOccurs="1" ref="level_start" />
				<xs:element minOccurs="0" maxOccurs="1" ref="level_end" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	<xs:element name="element" type="intParam" />
	<xs:element name="above" type="boolParam" />
	<xs:element name="exclusive" type="boolParam" />
	<xs:element name="hide" type="intParam" />
	<xs:element name="revolve_element" type="intParam" />
	<xs:element name="revolve_count" type="intParam" />
	<xs:element name="revolve_add" type="intParam" />
	<xs:element name="level_start" type="intParam" />
	<xs:element name="level_end" type="intParam" />
	<!-- ***************************************************************************
   ****************** Hierarchical Filter End **************************************
   ******************************************************************************* -->

	<!-- ***************************************************************************
   ****************** Text Filter Begin ************************************
   ******************************************************************************* -->
	<xs:element name="text_filter">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="1" maxOccurs="1" ref="regexes" />
				<xs:element minOccurs="0" maxOccurs="1" ref="extended" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- define individual regexes inside a regex tag -->
	<xs:element name="regexes">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="parameter" type="xs:string" minOccurs="0"/>
				<xs:element name="value">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="expression" minOccurs="1" maxOccurs="unbounded" type="xs:string" />
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="extended" type="boolParam"/>
	<!-- ***************************************************************************
   ****************** Text Filter End ************************************
   ******************************************************************************* -->

	<!-- ***************************************************************************
   ****************** Attribute Filter Begin *****************************************
   ******************************************************************************* -->
	<xs:element name="attribute_filter">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="1" maxOccurs="1" ref="attribute_filters" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="attribute_filters">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="parameter" type="xs:string" minOccurs="0"/>
				<xs:element name="value">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="filter_col" type="attribute_column" minOccurs="1" maxOccurs="unbounded" />
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="attribute_column">
		<xs:sequence>
			<xs:element name="attribute" type="xs:int" minOccurs="1" maxOccurs="1" />
			<xs:element name="col_entry" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<!-- ***************************************************************************
   ****************** Attribute Filter End ************************************
   ******************************************************************************* -->

  	<!-- ***************************************************************************
   ****************** Data Filter Begin ************************************
   ******************************************************************************* -->
	<xs:element name="data_filter">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="1" maxOccurs="1" ref="subcube" />
				<!-- when no op/par is passed, all elements are extracted (we could use values for sorting / TOP / etc) -->
				<xs:element minOccurs="0" maxOccurs="1" ref="criteria" />
				<xs:element minOccurs="0" maxOccurs="1" ref="top" />
				<xs:element minOccurs="0" maxOccurs="1" ref="upper_percentage" />
				<xs:element minOccurs="0" maxOccurs="1" ref="lower_percentage" />
				<xs:element minOccurs="0" maxOccurs="1" ref="cell_operator" />
				<xs:element minOccurs="0" maxOccurs="1" ref="no_rules" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	<!-- Set the cube that serves as our data source -->
	<xs:element name="subcube">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="source_cube" type="intParam" />
				<xs:sequence>
					<xs:element name="dimension_coordinates" type="element_list" minOccurs="0" maxOccurs="unbounded" />
				</xs:sequence>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- string array of coordinates that specify the cells we use as source for values-->
	<xs:complexType name="element_list">
		<xs:sequence>
			<xs:element name="parameter" type="xs:string" minOccurs="0"/>
			<xs:element name="value">
				<xs:complexType>
					<xs:sequence>
						<!-- use sigle value -1 to denote "all elements": -->
						<xs:element name="element" type="xs:int" minOccurs="0" maxOccurs="unbounded" />
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:element name="criteria">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" maxOccurs="1" ref="par1" />
				<xs:element minOccurs="0" maxOccurs="1" ref="op1" />
				<xs:element minOccurs="0" maxOccurs="1" ref="par2" />
				<xs:element minOccurs="0" maxOccurs="1" ref="op2" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- first value to compare cell results with - uses operator1-->
	<xs:element name="par1" type="stringParam" />
	<!--second value to compare cell results with - uses operator2-->
	<xs:element name="par2" type="stringParam" />
	<!-- first operator  used to compare with par1 -->
	<xs:element name="op1" type="xs:string" />
	<!-- second operator  used to compare with par2 -->
	<xs:element name="op2" type="xs:string" />

	<xs:element name="top" type="intParam" />
	<xs:element name="upper_percentage" type="decimalParam" />
	<xs:element name="lower_percentage" type="decimalParam" />
	<xs:element name="cell_operator" type="intParam" />
	<!--Flag for not using rules-->
	<xs:element name="no_rules" type="intParam"/>
	<!-- ***************************************************************************
   ****************** Data Filter End ************************************
   ******************************************************************************* -->

   	<!-- ***************************************************************************
   ****************** Picklist Begin ************************************
   ******************************************************************************* -->
	<xs:element name="picklist_filter">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="1" maxOccurs="1" ref="manual_definition" />
				<xs:element minOccurs="0" maxOccurs="1" ref="pick_type" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	<xs:element name="manual_definition">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="parameter" type="xs:string" minOccurs="0"/>
				<xs:element name="value">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="pick_elem" type="xs:integer" minOccurs="0" maxOccurs="unbounded" />
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	
	<!-- list of elements that are inside our subset, the others are removed -->
	<xs:element name="pick_type" type="intParam" />
	<!-- ***************************************************************************
   ****************** Picklist End *********************************************
   ******************************************************************************* -->

	<!-- ***************************************************************************
   ****************** Sorting Filter Begin ************************************
   ******************************************************************************* -->
	<xs:element name="sorting_filter">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" maxOccurs="1" ref="whole" />
				<xs:element minOccurs="0" maxOccurs="1" ref="sorting_criteria" />
				<xs:element minOccurs="0" maxOccurs="1" ref="attribute" />
				<xs:element minOccurs="0" maxOccurs="1" ref="type_limitation" />
				<xs:element minOccurs="0" maxOccurs="1" ref="level_element" />
				<xs:element minOccurs="0" maxOccurs="1" ref="reverse" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="whole" type="intParam" />
	<xs:element name="sorting_criteria" type="intParam" />
	<!-- Set the attribute/alias according to which we want to sort -->
	<xs:element name="attribute" type="intParam" />
	<xs:element name="type_limitation" type="intParam" />
	<!-- Set the element that defines the level we use for sorting-->
	<xs:element name="level_element" type="intParam" />
	<xs:element name="reverse" type="intParam" />
	<!-- ***************************************************************************
   ****************** Sorting Filter End ************************************
   ******************************************************************************* -->

	<!-- Parametrized simple types -->
   	<xs:complexType name="boolParam">
		<xs:sequence>
			<xs:element name="parameter" type="xs:string" minOccurs="0"/>
			<xs:element name="value" type="xs:boolean"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="intParam">
		<xs:sequence>
			<xs:element name="parameter" type="xs:string" minOccurs="0"/>
			<xs:element name="value" type="xs:integer"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="decimalParam">
		<xs:sequence>
			<xs:element name="parameter" type="xs:string" minOccurs="0"/>
			<xs:element name="value" type="xs:decimal"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="stringParam">
		<xs:sequence>
			<xs:element name="parameter" type="xs:string" minOccurs="0"/>
			<xs:element name="value" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>

</xs:schema>