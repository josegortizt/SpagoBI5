/*
*
* @file FontDescriptor.java
*
* Copyright (C) 2006-2009 Tensegrity Software GmbH
*
* This program is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License (Version 2) as published
* by the Free Software Foundation at http://www.gnu.org/copyleft/gpl.html.
*
* This program is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
* more details.
*
* You should have received a copy of the GNU General Public License along with
* this program; if not, write to the Free Software Foundation, Inc., 59 Temple
* Place, Suite 330, Boston, MA 02111-1307 USA
*
* If you are developing and distributing open source applications under the
* GPL License, then you are free to use JPalo Modules under the GPL License.  For OEMs,
* ISVs, and VARs who distribute JPalo Modules with their products, and do not license
* and distribute their source code under the GPL, Tensegrity provides a flexible
* OEM Commercial License.
*
* @author ArndHouben
*
* @version $Id: FontDescriptor.java,v 1.4 2009/07/20 08:30:47 ArndHouben Exp $
*
*/

/*
 * (c) Tensegrity Software 2007
 * All rights reserved
 */
package org.palo.api.ext.ui;



/**
 * A <code>FontDescriptor</code> is a platform-independent font description.
 * 
 * @author ArndHouben
 * @version $Id: FontDescriptor.java,v 1.4 2009/07/20 08:30:47 ArndHouben Exp $
 **/
public class FontDescriptor {
	
	private int size;
	private String name;
	private boolean isBold;
	private boolean isItalic;
	private boolean isUnderlined;


	/**
	 * A default constructor which leaves all fields un-initialized!
	 */
	public FontDescriptor() {
	}
	
	/**
	 *  Creates a new <code>FontDescriptor</code> instance from the given
	 *  description string. The description string has to be in the form 
	 *  generated by the <code>FontDescriptor.toString</code> method.
	 *  
	 * @param description a font description (must not be null)
	 */
	public FontDescriptor(String description) {
		parse(description);
	}
	
	
	/**
	 * Checks if a bold font should be used
	 * @return <code>true</code> if a bold font should be used, 
	 * <code>false</code> otherwise
	 */
	public final boolean isBold() {
		return isBold;
	}
	
	/**
	 * Sets the bold flag of this font
	 * @param b set to <code>true</code> if font should be bold, to 
	 * <code>false</code> otherwise
	 */
	public final void setBold(boolean b) {
		isBold = b;
	}
	
	/**
	 * Returns the name of this font
	 * @return font name
	 */
	public final String getName() {
		return name;
	}
	
	/**
	 * Sets the name of this font
	 * @param name font name
	 */
	public final void setName(String name) {
		this.name = name;
	}
	
	/**
	 * Returns the font size
	 * @return font size
	 */
	public final int getSize() {
		return size;
	}
	
	/**
	 * Sets the size of this font
	 * @param size font size
	 */
	public final void setSize(int size) {
		this.size = size;
	}
	
	
	/**
	 * Checks if the font is italic
	 * @return <code>true</code> if font is italic, <code>false</code> otherwise
	 */
	public final boolean isItalic() {
		return isItalic;
	}
	
	/**
	 * Sets the italic flag to indicate if this font should be italic
	 * @param b set to <code>true</code> if this font should be italic, to
	 * <code>false</code> otherwise
	 */
	public final void setItalic(boolean b) {
		isItalic = b;
	}
	
	/**
	 * Checks if the font should be underlined
	 * @return <code>true</code> if font is underlined, <code>false</code>
	 * otherwise
	 */
	public final boolean isUnderlined() {
		return isUnderlined;
	}
	
	/**
	 * Sets the underlined flag to indicate that this font should be underlined.
	 * @param b set to <code>true</code> if this font should be underlined, to
	 * <code>false</code> otherwise
	 */
	public final void setUnderlined(boolean b) {
		isUnderlined = b;
	}
	
	public String toString() {
		StringBuffer fontStr = new StringBuffer();
		fontStr.append(name);
		fontStr.append(",");
		fontStr.append(size);
		fontStr.append(",");
		fontStr.append(isBold?"bold":" ");
		fontStr.append(",");
		fontStr.append(isItalic?"italic":" ");
		fontStr.append(",");
		fontStr.append(isUnderlined?"underlined":" ");
		fontStr.append(",");
		return fontStr.toString();
	}
	
	private final void parse(String fontDescription) {
		String[] values = fontDescription.split(",");
		name = values[0];
		size = Integer.parseInt(values[1]);
		isBold = "bold".equals(values[2]);
		isItalic = "italic".equals(values[3]);
		isUnderlined = "underlined".equals(values[4]);
	}

}
