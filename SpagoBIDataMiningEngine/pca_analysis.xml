<?xml version="1.0" encoding="ISO-8859-15"?>
<DATA_MINING>
    <PARAMETERS>
    </PARAMETERS>
    
    <DATASETS>
        <DATASET name="dataset" readType="csv" type="file" label="Wine quality red">  
            <![CDATA[header = TRUE, sep = ";", quote = "\"'", na.strings="",encoding="latin1",]]>
        </DATASET>
    </DATASETS>  
    <SCRIPTS>  
        <SCRIPT name="pcaLogic" mode="auto" datasets="dataset" label="winequality-red">
            <![CDATA[
install.packages('vegan', repos='http://cran.stat.unipd.it')
install.packages('ellipse', repos='http://cran.stat.unipd.it')

library(vegan)
library(ellipse)

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------

#---------------------------------------
# Input scaling
#---------------------------------------
# Normalize a dataset according to the chosen option number
input_scaling<-function(scaling_type,L_val,H_val,lambda){
    tryCatch({
        switch(scaling_type,
            # 1 Normalization of each single column dividing by its total
            dataset<<-decostand(dataset,method='total',MARGIN=2),
            # 2 Normalization of each single column dividing by its maximum
            dataset<<-decostand(dataset,method='max',MARGIN=2),
            ## 3 Normalization of each single column between by 0 and 1
            dataset<<-decostand(dataset,method='range',MARGIN=2),
            ## 4 Normalization of each single column between by -1 and 1
            dataset<<-decostand(dataset,method='range',MARGIN=2)*2-1,
            ## 5 Normalization of each single column between by L_val and H_val
            dataset<<-decostand(dataset,method='range',MARGIN=2)*(H_val-L_val)+L_val,
            ## 6 Standardization of each single column (mean=0 and variance=1)
            dataset<<-decostand(dataset,method='standardize',MARGIN=2),
            ## 7 Natural logarithmic normalization of each single column
            dataset<<-log(dataset),
            ## 8 Logarithmic normalization to base 10 of each single column
            dataset<<-log10(dataset),
            ## 9 Logarithmic normalization to base 10 of each single column+1
            dataset<<-log10(dataset+1),
            ## 10 Box-Cox normalization of each single column (lambda > 1e-06)
            dataset<<-((dataset^lambda)-1)/lambda
        )
        cat("Dataset normalized\n")
        ret<<-0
    },error=function(ex){
        cat("Error normalizing Dataset\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    return(ret)
}

#---------------------------------------
# Analysis (PCA)
#---------------------------------------
# Perform pca
analysis_pca<-function(){
    tryCatch({
        pc<<-princomp(dataset)
        cat("Dataset analyzed\n")
        ret<<-0
    },error=function(ex){
        cat("Error performing PCA\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}


#---------------------------------------
# Explained variance plot
#---------------------------------------
# Plot the explained variance
explained_variance_plot<-function(){
    tryCatch({
        par(mar=c(6.1,4.1,4.1,2.1))
        barplot(100*pc$sdev/sum(pc$sdev),
                ylab="Variance",
                las=2,
                cex.axis=.7,
                cex.names=.7,
                col=rainbow(length(pc$sdev)),
                main="Explained variance"
        )                    
        par(mar=c(5,8,4,2))
        ret<<-0
    },error=function(ex){
        cat("Error plotting variane\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}

#---------------------------------------
# Explained variance print
#---------------------------------------
# Print the explained variance
explained_variance_print<-function(){
    tryCatch({
        pcs<-data.frame(pc$sdev,pc$sdev/sum(pc$sdev))
        cat("Explained variance\n")
        colnames(pcs)<-c("Variance","Variance %")
        print(pcs)
        ret<<-0
    },error=function(ex){
        cat("Error printing variance\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}

#---------------------------------------
# Cumulated explained variance plot
#---------------------------------------
# Plot the cumulated explained variance
cumulated_explained_variance_plot<-function(){
    tryCatch({
        par(mar=c(6.1,4.1,4.1,2.1))
        barplot(cumsum(100*pc$sdev/sum(pc$sdev)),
                ylab="Cumulated variance",
                las=2,
                cex.axis=.7,
                cex.names=.7,
                col=rainbow(length(pc$sdev)),
                main="Cumulated explained variance"
        )                    
        par(mar=c(5,8,4,2))
        ret<<-0
    },error=function(ex){
        cat("Error plotting cumulated variance\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}

#---------------------------------------
# Cumulated explained variance print
#---------------------------------------
# Print the cumulated explained variance
cumulated_explained_variance_print<-function(){
    tryCatch({
        pcs<-data.frame(pc$sdev,pc$sdev/sum(pc$sdev),cumsum(100*pc$sdev/sum(pc$sdev)))
        cat("Cumulated Explained variance\n")
        colnames(pcs)<-c("Variance","Variance %","Cum variance %")
        print(pcs)
        ret<<-0
    },error=function(ex){
        cat("Error printing cumulated variance\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}

#---------------------------------------
# Loadings plot
#---------------------------------------
# Plot the loadings correlogram
loadings_plot<-function(){
    tryCatch({
        par(mar=c(5.1,4.1,4.1,2.1))
        plotcorr(pc$loadings,
                col=rainbow(length(pc$sdev)),
                cex.axis=.7,
                cex.lab=.7,
                main="PCA loadings"
        )
        par(mar=c(5,8,4,2))
        ret<<-0
    },error=function(ex){
        cat("Error plotting loadings\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}

#---------------------------------------
# Loadings print
#---------------------------------------
# Print the loadings
loadings_print<-function(){
    tryCatch({
        print(loadings(pc),cutoff=0)
        ret<<-0
    },error=function(ex){
        cat("Error printing loadings\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}

#---------------------------------------
# Spectral diagram plot
#---------------------------------------
# Plot the spectral diagram
spectral_plot<-function(comp){
    tryCatch({
        par(mar=c(4, 18, 2, 0.5))
        maini<-paste("Component ",comp," spectral diagram")
        barplot(pc$loadings[1:length(pc$sdev),comp],
                col=rainbow(length(pc$sdev)),
                cex.axis=.7,
                cex.names=.7,
                horiz=T,las=2,
                main=maini
        )
        par(mar=c(5,8,4,2))
        ret<<-0
    },error=function(ex){
        cat("Error plotting spectral diagram\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}

#---------------------------------------
# Spectral diagram print
#---------------------------------------
# Print the spectral diagram
spectral_print<-function(comp){
    tryCatch({
        cat("Component ",comp," spectral diagram","\n")
        print(pc$loadings[1:length(pc$sdev),comp])
        ret<<-0
    },error=function(ex){
        cat("Error printing spectral diagram\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}


#---------------------------------------
# Central value plot
#---------------------------------------
# Plot the central value
central_plot<-function(){
    tryCatch({
        par(mar=c(4, 18, 2, 0.5))
        barplot(pc$center,
                col=rainbow(length(pc$sdev)),
                cex.axis=.7,
                cex.names=.7,
                horiz=T,las=2,
                main="Central value"
        )                    
        par(mar=c(5,8,4,2))
        ret<<-0
    },error=function(ex){
        cat("Error plotting central value\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}

#---------------------------------------
# Central value print
#---------------------------------------
# Print the central value
central_print<-function(){
    tryCatch({
        cat("Central value\n")
        print(pc$center)
        ret<<-0
    },error=function(ex){
        cat("Error printing the central value\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}

#---------------------------------------
# Scores print
#---------------------------------------
# Print scores
scores_print<-function(){
    tryCatch({
        cat("Scores\n")
        print(scores(pc))
        ret<<-0
    },error=function(ex){
        cat("Error printing scores\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}

#---------------------------------------
# Biplot plot
#---------------------------------------
# Biplot on two components
biplot_plot<-function(comp_x,comp_y,lab=F){
    tryCatch({
        par(mar=c(5.1,4.1,4.1,2.1))
        maini=paste("Biplot on components",comp_x,"e",comp_y)
        if(lab){
            lab<-rownames(dataset)
        }else{
            lab<-rep('o',nrow(dataset))
        }
        biplot(pc,choices=c(comp_x,comp_y),xlabs=lab,cex=0.7,cex.axis=0.7,cex.main=0.9,main=maini)
        par(mar=c(5,8,4,2))
        ret<<-0
    },error=function(ex){
        cat("Error plotting biplot\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}

#---------------------------------------
# Biplot print
#---------------------------------------
# Print the biplot realed values
biplot_print<-function(comp_x,comp_y){
    tryCatch({
        cat("Component",comp_x,"Component",comp_y,"\n")
        mat<-cbind(rownames(dataset),pc$scores[,comp_x],pc$scores[,comp_y])
        colnames(mat)<-c("row",colnames(pc$scores)[comp_x],colnames(pc$scores)[comp_y])
        print(mat)
        ret<<-0
    },error=function(ex){
        cat("Error printing biplot\nDetail:\n")
        print(ex)
        ret<<-1
    },interrupt=function(ex){
        cat("Interrupt\n")
    },finally={
        cat("\n")
    })

    if(ret>0){
        cat("Program halted\n")
        stop()
    }

    return(ret)
}           
    
#---------------------------------------
# Action command function
#---------------------------------------    
action_pca<-function(scaling_type){
	input_scaling(scaling_type);
	analysis_pca();

}            
             ]]>
        </SCRIPT>
    </SCRIPTS>
    <COMMANDS>
        <COMMAND name="pca" scriptName="pcaLogic" label="PCA" mode="auto" action="action_pca(6)">
            <OUTPUTS>
                <OUTPUT type="image" name="explained_variance_plot" value=""  function="explained_variance_plot()" mode="auto" label="explained variance"/>
                <OUTPUT type="image" name="loadings_plot" value=""  function="loadings_plot()" mode="manual" label="loadings plot"/>
            </OUTPUTS>
        </COMMAND>
    </COMMANDS>
</DATA_MINING>